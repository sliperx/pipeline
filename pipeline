pipeline {
    agent {
        kubernetes {
            defaultContainer 'docker'
            yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins
  containers:
    - name: docker
      image: twnsnd2team/docker:v2
      resources:
        limits:
          memory: "256Mi"
          cpu: "200m"
      command:
        - sleep
        - "1d"
      volumeMounts:
        - name: dockersock
          mountPath: /var/run/docker.sock
          readOnly: false
  volumes:
    - name: dockersock
      hostPath:
        path: /var/run/docker.sock
    - name: kubeconfig
      secret:
        secretName: jenkins-agent
                """
        }
    }
   environment {
    APP_ENV = 'develop'
    IMAGE_BASE = 'freenance/info'
    IMAGE_TAG = "v$BUILD_NUMBER"
    IMAGE_NAME = "${env.IMAGE_BASE}"
    IMAGE_NAME_LATEST = "${env.IMAGE_BASE}:latest"
    HOST = "https://info.freenance.online"
    DOCKERFILE_NAME = "Dockerfile"
    }
    options {
        timeout(time: 10, unit: 'MINUTES')
        disableConcurrentBuilds()
    }
    stages {
        stage('Delete workspace before build starts') {
            steps {
                echo 'Deleting workspace'
                deleteDir()
            }
        }
        stage('Env print') {
            steps {
                sh '''
                    echo Selected Type of checkout: $TYPE
                    echo Selected Branch name: $BRANCH
                    echo Selected Tag name: $TAG
                    echo Selected Branch or Tag name: $BRANCH_and_TAG
                    echo Selected Revision name: $REVISION
                    echo Selected Pull request name: $PULL_REQUESTS
                '''
            }
        }
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: 'git_freenance', url: 'git@github.com:PineappleIncTeam/infopage.git'
                script {
                    commitId = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    currentBuild.description = "${commitId}"
                    echo "${commitId}"
                }
            }
        }
        stage ('Create files') {
            steps {
                script {
                    def envNginxConf= '''
                    user  nginx;
                    worker_processes  auto;

                    error_log  /var/log/nginx/error.log notice;
                    pid        /var/run/nginx.pid;


                    events {
                    worker_connections  1024;
                    }


                    http {
                    include       /etc/nginx/mime.types;
                    default_type  application/octet-stream;

                    log_format main '$remote_addr - $remote_user [$time_local] ' 
                                     '"$request" $status $request_time $upstream_response_time $body_bytes_sent ' 
                                     '"$http_referer" "$http_user_agent" ' 
                                     '$upstream_addr ' '$upstream_status ' '$upstream_connect_time ' '$upstream_header_time';

                    access_log  /var/log/nginx/access.log  main;

                    sendfile        on;
                    #tcp_nopush     on;

                    keepalive_timeout  65;

                    #gzip  on;

                    include /etc/nginx/conf.d/*.conf;
                    }
                    '''
                    writeFile file: 'nginx.conf', text: "${envNginxConf}"
                    sh 'cat nginx.conf'
                    def envDefaultConf= '''
                    server {
                    listen 80;

                    location / {
                        root /usr/share/nginx/html/;
                        include /etc/nginx/mime.types;
                        try_files $uri $uri/ /index.html;
                            }
                    }
                    '''
                    writeFile file: 'default.conf', text: "${envDefaultConf}"
                    sh 'cat default.conf'
                    def envDeployManifest= '''
                    apiVersion: v1
                    kind: Service
                    metadata:
                    namespace: info
                    name: info-freenance
                    spec:
                    selector:
                        app: info-freenance
                    ports:
                        - protocol: TCP
                        port: 80
                        targetPort: 80
                    type: ClusterIP
                    ---
                    apiVersion: apps/v1
                    kind: Deployment
                    metadata:
                    namespace: info
                    name: info-freenance
                    spec:
                    replicas: 1
                    selector:
                        matchLabels:
                        app: info-freenance
                    template:
                        metadata:
                        labels:
                            app: info-freenance
                        spec:
                        containers:
                        - name: info
                            image: freenance/info:v1
                            resources:
                            requests:
                                memory: "32Mi"
                                cpu: "25m"
                            limits:
                                memory: "64Mi"
                                cpu: "50m"
                            ports:
                            - containerPort: 80
                    '''
                    writeFile file: 'infoPageDeploymentProd.yaml', text: "${envDeployManifest}"
                    sh 'cat infoPageDeploymentProd.yaml'
                }
            }
        }
        stage ('create dockerfile') {
            steps {
                script {
                    writeFile file: "${env.DOCKERFILE_NAME}", text: '''
                    FROM nginx:1.27
                    COPY index.html elastic.jpg Figma.jpg google.jpg jenkins.jpg jira.jpg logo.jpg pgadmin.jpg /usr/share/nginx/html
                    ADD nginx.conf /etc/nginx
                    ADD default.conf /etc/nginx/conf.d
                    EXPOSE 80
                    CMD ["nginx", "-g", "daemon off;"]
                    '''
                   }
                }
            }
        }
        stage ('build image') {
            steps {
                script {
                    def dockerImage = docker.build("${env.IMAGE_NAME}:${commitId})","-f ${env.DOCKERFILE_NAME} .")
                    docker.withRegistry('', 'docker-hub-freenance') {
                    dockerImage.push()
                    dockerImage.push("${commitId}")
                    }
                echo "Pushed Docker Image: ${env.IMAGE_NAME}:${commitId}"
                }
                sh "docker rmi ${env.IMAGE_NAME}:${commitId}"
            }
        }
         stage('Deploy to Kubernetes') {
            steps {
                withKubeConfig([credentialsId: 'kubernetes-jenkins']) {
                    sh 'kubectl apply -f infoPageDeploymentProd.yaml'
                }
            }
        }
    }
